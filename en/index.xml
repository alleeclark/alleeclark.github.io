<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Allee Clark</title>
    <link>https://alleeclark.github.io/en/</link>
    <description>Recent content on Allee Clark</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>alleeclark@gmail.com (allee)</managingEditor>
    <webMaster>alleeclark@gmail.com (allee)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 16 Jun 2020 12:00:06 +0900</lastBuildDate>
    
        <atom:link href="https://alleeclark.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Getting Started With Go Getter</title>
        <link>https://alleeclark.github.io/en/posts/getting-started-with-go-getter/</link>
        <pubDate>Tue, 16 Jun 2020 12:00:06 +0900</pubDate>
        <author>alleeclark@gmail.com (allee)</author>
        <atom:modified>Tue, 16 Jun 2020 12:00:06 +0900</atom:modified>
        <guid>https://alleeclark.github.io/en/posts/getting-started-with-go-getter/</guid>
        <description>Getting started with go getter
This post is a small example of how to use Hashicorp&amp;rsquo;s go-getter. This package allows you to pull files easily from GCS, GIT or S3. I&amp;rsquo;ll explain a bit about my use case below. I assume you know about Hashicorp and golang and looking for a clean example to get started. For the past few weeks, I&amp;rsquo;ve written designs for a delivery system using Hashi(Hashicorp) tools such as Consul for keys and service discovery, Vault for dynamic secrets, and Terraform to create and modify infrastructure resources.</description>
        
        <dc:creator>Allee Clark</dc:creator>
        
        
        
        
          
            
              <category>go</category>
            
          
            
              <category>hashicorp</category>
            
          
            
              <category>open source</category>
            
          
            
              <category>cloud</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Getting Started With ttrpc</title>
        <link>https://alleeclark.github.io/en/posts/getting-started-with-ttrpc/</link>
        <pubDate>Sun, 25 Aug 2019 12:00:06 +0900</pubDate>
        <author>alleeclark@gmail.com (allee)</author>
        <atom:modified>Sun, 25 Aug 2019 12:00:06 +0900</atom:modified>
        <guid>https://alleeclark.github.io/en/posts/getting-started-with-ttrpc/</guid>
        <description>Getting started with ttrpc
I believe ttrpc stands for teeny tiny rpc. Don&amp;rsquo;t quote me on it. Created for low latency environments based off of the famous gRPC. I was introduced by ttrpc in a talk given by a containerD maintainer. Unexpected for you to know how containerD functions to get started with ttrpc. This guide is aimed for developers who know gRPC and would like to get started with ttrpc.</description>
        
        <dc:creator>Allee Clark</dc:creator>
        
        
        
        
          
            
              <category>go</category>
            
          
            
              <category>rpc</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>VSCode Productivity Tips &amp; Tricks</title>
        <link>https://alleeclark.github.io/en/posts/vscode-tips-and-tricks/</link>
        <pubDate>Fri, 17 May 2019 12:00:06 +0900</pubDate>
        <author>alleeclark@gmail.com (allee)</author>
        <atom:modified>Fri, 17 May 2019 12:00:06 +0900</atom:modified>
        <guid>https://alleeclark.github.io/en/posts/vscode-tips-and-tricks/</guid>
        <description>More than likely I am a Microsoft developer tool advocate. My first language was c++ using Visual Studio. Haven’t stopped sipping the kool aid since. Even though my primary language is golang today.
Bookmarks Same principle as your web browser. Keep track of places in the code that you know you will need to come back to.
Pros:
 Label bookmarks Side view for all bookmarks per file Search bookmarks Cons: Unable to add multiple lines per a bookmark.</description>
        
        <dc:creator>Allee Clark</dc:creator>
        
        
        
        
          
            
              <category>time management</category>
            
          
            
              <category>coding</category>
            
          
            
              <category>vscode</category>
            
          
            
              <category>editor</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>My Daily Work Routine</title>
        <link>https://alleeclark.github.io/en/posts/daily-sre-routine/</link>
        <pubDate>Fri, 03 May 2019 12:00:06 +0900</pubDate>
        <author>alleeclark@gmail.com (allee)</author>
        <atom:modified>Fri, 03 May 2019 12:00:06 +0900</atom:modified>
        <guid>https://alleeclark.github.io/en/posts/daily-sre-routine/</guid>
        <description>The schedule below isn’t the full picture because I normally go on call every few weeks. I spend on call days communicating with other teams and resolving incidents. Bi-weekly attending meetings related to on-boarding, recruiting tech talks, and all hands. I only read work email in the morning unless someone PMs me to review. My company also uses Slack for communication and I limit my time on there as well. This facilitates minimizing distractions and intaking too much information.</description>
        
        <dc:creator>allee</dc:creator>
        
        
        
        
          
            
              <category>time management</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>What decision should I make about an incident?</title>
        <link>https://alleeclark.github.io/en/posts/incident-decisions/</link>
        <pubDate>Thu, 28 Mar 2019 12:00:06 +0900</pubDate>
        <author>alleeclark@gmail.com (allee)</author>
        <atom:modified>Thu, 28 Mar 2019 12:00:06 +0900</atom:modified>
        <guid>https://alleeclark.github.io/en/posts/incident-decisions/</guid>
        <description>This is mainly written from a production engineer’s view. This might be helpful for an engineer who is response for some production service, and just wants a sanity check… On with the question. Sometimes you have legacy software that most of your company’s critical path relies on. That software hasn&amp;rsquo;t powered off in X amount of scary years. Some combination of documentation, automation of task and source control code is nonexistent.</description>
        
        <dc:creator>allee</dc:creator>
        
        
        
        
          
            
              <category>sre</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>