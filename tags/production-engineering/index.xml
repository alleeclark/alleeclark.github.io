<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Production Engineering on //allee</title>
    <link>https://allee.xyz/tags/production-engineering/</link>
    <description>Recent content in Production Engineering on //allee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 28 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://allee.xyz/tags/production-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What decision should I make about an incident?</title>
      <link>https://allee.xyz/posts/what-should-i-do/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allee.xyz/posts/what-should-i-do/</guid>
      <description>This is mainly written from a production engineer’s view. This might be helpful for an engineer who is response for some production service, and just wants a sanity check&amp;hellip; On with the question. Sometimes you have legacy software that most of your company’s critical path relies on. That software hasn&amp;rsquo;t powered off in X amount of scary years. Some combination of documentation, automation of task and source control code is nonexistent.</description>
    </item>
    
  </channel>
</rss>